import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Image,
  Alert,
  Share,
  Dimensions
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialIcons, Ionicons, FontAwesome5 } from '@expo/vector-icons';
import { ProgressChart } from 'react-native-chart-kit';

const { width } = Dimensions.get('window');

const CropHealthResultsScreen = ({ route, navigation }) => {
  const { analysis } = route.params;
  const [showDetails, setShowDetails] = useState(false);

  const healthScore = analysis.analysis?.overallHealth?.score || 0;
  const healthStatus = analysis.analysis?.overallHealth?.status || 'unknown';
  const diseases = analysis.analysis?.diseases || [];
  const pests = analysis.analysis?.pests || [];
  const recommendations = analysis.analysis?.recommendations || [];

  const chartConfig = {
    backgroundColor: '#ffffff',
    backgroundGradientFrom: '#ffffff',
    backgroundGradientTo: '#f8f9fa',
    color: (opacity = 1) => {
      if (healthScore >= 90) return `rgba(46, 204, 113, ${opacity})`;
      if (healthScore >= 80) return `rgba(52, 152, 219, ${opacity})`;
      if (healthScore >= 70) return `rgba(243, 156, 18, ${opacity})`;
      return `rgba(231, 76, 60, ${opacity})`;
    },
    strokeWidth: 2,
  };

  const getHealthColor = () => {
    if (healthScore >= 90) return '#2ecc71';
    if (healthScore >= 80) return '#3498db';
    if (healthScore >= 70) return '#f39c12';
    return '#e74c3c';
  };

  const getStatusIcon = () => {
    if (healthScore >= 90) return 'check-circle';
    if (healthScore >= 80) return 'info';
    if (healthScore >= 70) return 'warning';
    return 'error';
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return '#e74c3c';
      case 'high': return '#e67e22';
      case 'medium': return '#f39c12';
      case 'low': return '#27ae60';
      default: return '#95a5a6';
    }
  };

  const shareResults = async () => {
    try {
      const shareContent = `Crop Health Analysis Results\n\nHealth Score: ${healthScore}%\nStatus: ${healthStatus}\n\n${diseases.length > 0 ? `Diseases Detected: ${diseases.length}\n` : ''}${pests.length > 0 ? `Pests Detected: ${pests.length}\n` : ''}\nConfidence: ${Math.round((analysis.confidence || 0) * 100)}%\n\nGenerated by KrishiVedha AI`;
      
      await Share.share({
        message: shareContent,
        title: 'Crop Health Analysis'
      });
    } catch (error) {
      Alert.alert('Error', 'Failed to share results');
    }
  };

  const renderHealthScore = () => {
    const data = { data: [healthScore / 100] };
    
    return (
      <View style={styles.scoreContainer}>
        <Text style={styles.scoreTitle}>Overall Health Score</Text>
        <View style={styles.chartWrapper}>
          <ProgressChart
            data={data}
            width={200}
            height={200}
            strokeWidth={16}
            radius={80}
            chartConfig={chartConfig}
            hideLegend={true}
            style={styles.progressChart}
          />
          <View style={styles.scoreOverlay}>
            <Text style={[styles.scoreValue, { color: getHealthColor() }]}>
              {healthScore}%
            </Text>
            <Text style={[styles.scoreStatus, { color: getHealthColor() }]}>
              {healthStatus}
            </Text>
            <MaterialIcons 
              name={getStatusIcon()} 
              size={24} 
              color={getHealthColor()} 
              style={styles.statusIcon}
            />
          </View>
        </View>
        <View style={[styles.confidenceBadge, { backgroundColor: getHealthColor() + '20' }]}>
          <Text style={[styles.confidenceText, { color: getHealthColor() }]}>
            {Math.round((analysis.confidence || 0) * 100)}% Confidence
          </Text>
        </View>
      </View>
    );
  };

  const renderDiseaseCard = (disease, index) => (
    <View key={index} style={[styles.issueCard, { borderLeftColor: getSeverityColor(disease.severity) }]}>
      <View style={styles.issueHeader}>
        <View style={styles.issueInfo}>
          <Text style={styles.issueName}>{disease.name}</Text>
          <View style={styles.issueMetrics}>
            <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(disease.severity) + '20' }]}>
              <Text style={[styles.severityText, { color: getSeverityColor(disease.severity) }]}>
                {disease.severity}
              </Text>
            </View>
            <Text style={styles.confidenceMetric}>
              {Math.round((disease.confidence || 0) * 100)}% confidence
            </Text>
          </View>
        </View>
        <MaterialIcons name="local-hospital" size={24} color={getSeverityColor(disease.severity)} />
      </View>
      
      {disease.affectedArea && (
        <Text style={styles.affectedArea}>Affected Area: {disease.affectedArea}</Text>
      )}
      
      {disease.treatment && (
        <View style={styles.treatmentContainer}>
          <Text style={styles.treatmentTitle}>Treatment:</Text>
          {disease.treatment.immediate && disease.treatment.immediate.map((treatment, idx) => (
            <Text key={idx} style={styles.treatmentItem}>• {treatment}</Text>
          ))}
          {disease.treatment.cost && (
            <Text style={styles.treatmentCost}>Est. Cost: ₹{disease.treatment.cost}</Text>
          )}
        </View>
      )}
      
      {disease.prognosis && (
        <Text style={styles.prognosis}>Prognosis: {disease.prognosis}</Text>
      )}
    </View>
  );

  const renderPestCard = (pest, index) => (
    <View key={index} style={[styles.issueCard, { borderLeftColor: getSeverityColor(pest.severity) }]}>
      <View style={styles.issueHeader}>
        <View style={styles.issueInfo}>
          <Text style={styles.issueName}>{pest.name}</Text>
          <View style={styles.issueMetrics}>
            <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(pest.severity) + '20' }]}>
              <Text style={[styles.severityText, { color: getSeverityColor(pest.severity) }]}>
                {pest.severity}
              </Text>
            </View>
            <Text style={styles.confidenceMetric}>
              {Math.round((pest.confidence || 0) * 100)}% confidence
            </Text>
          </View>
        </View>
        <MaterialIcons name="bug-report" size={24} color={getSeverityColor(pest.severity)} />
      </View>
      
      {pest.treatment && (
        <View style={styles.treatmentContainer}>
          <Text style={styles.treatmentTitle}>Control:</Text>
          <Text style={styles.treatmentItem}>• {pest.treatment}</Text>
        </View>
      )}
    </View>
  );

  const renderRecommendations = () => {
    if (recommendations.length === 0) return null;

    return (
      <View style={styles.recommendationsSection}>
        <Text style={styles.sectionTitle}>AI Recommendations</Text>
        {recommendations.map((rec, index) => (
          <View key={index} style={styles.recommendationItem}>
            <MaterialIcons name="lightbulb-outline" size={20} color="#f39c12" />
            <Text style={styles.recommendationText}>{rec}</Text>
          </View>
        ))}
      </View>
    );
  };

  const renderGrowthStage = () => {
    const growthStage = analysis.analysis?.growthStage;
    if (!growthStage) return null;

    return (
      <View style={styles.infoCard}>
        <Text style={styles.infoTitle}>Growth Stage</Text>
        <View style={styles.growthStageContainer}>
          <View style={styles.currentStage}>
            <Text style={styles.stageLabel}>Current</Text>
            <Text style={styles.stageValue}>{growthStage.current}</Text>
          </View>
          <MaterialIcons name="arrow-forward" size={24} color="#666" />
          <View style={styles.nextStage}>
            <Text style={styles.stageLabel}>Next</Text>
            <Text style={styles.stageValue}>{growthStage.expectedNext}</Text>
          </View>
        </View>
        {growthStage.daysToNext && (
          <Text style={styles.daysToNext}>
            Expected in {growthStage.daysToNext} days
          </Text>
        )}
      </View>
    );
  };

  const renderNutritionalDeficiency = () => {
    const nutrition = analysis.analysis?.nutritionalDeficiency;
    if (!nutrition || !nutrition.detected) return null;

    return (
      <View style={styles.infoCard}>
        <Text style={styles.infoTitle}>Nutritional Deficiency Detected</Text>
        <View style={styles.nutrientsList}>
          {nutrition.nutrients.map((nutrient, index) => (
            <View key={index} style={styles.nutrientBadge}>
              <Text style={styles.nutrientText}>{nutrient}</Text>
            </View>
          ))}
        </View>
      </View>
    );
  };

  return (
    <ScrollView style={styles.container}>
      {/* Header */}
      <LinearGradient
        colors={[getHealthColor(), getHealthColor() + '80']}
        style={styles.header}
      >
        <TouchableOpacity 
          style={styles.backButton} 
          onPress={() => navigation.goBack()}
        >
          <MaterialIcons name="arrow-back" size={24} color="white" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Crop Health Analysis</Text>
        <TouchableOpacity style={styles.shareButton} onPress={shareResults}>
          <MaterialIcons name="share" size={24} color="white" />
        </TouchableOpacity>
      </LinearGradient>

      {/* Health Score */}
      {renderHealthScore()}

      {/* Growth Stage */}
      {renderGrowthStage()}

      {/* Nutritional Deficiency */}
      {renderNutritionalDeficiency()}

      {/* Diseases */}
      {diseases.length > 0 && (
        <View style={styles.issuesSection}>
          <Text style={styles.sectionTitle}>
            Diseases Detected ({diseases.length})
          </Text>
          {diseases.map(renderDiseaseCard)}
        </View>
      )}

      {/* Pests */}
      {pests.length > 0 && (
        <View style={styles.issuesSection}>
          <Text style={styles.sectionTitle}>
            Pests Detected ({pests.length})
          </Text>
          {pests.map(renderPestCard)}
        </View>
      )}

      {/* No Issues Found */}
      {diseases.length === 0 && pests.length === 0 && (
        <View style={styles.noIssuesCard}>
          <MaterialIcons name="check-circle" size={48} color="#2ecc71" />
          <Text style={styles.noIssuesTitle}>No Issues Detected</Text>
          <Text style={styles.noIssuesText}>
            Your crop appears to be healthy with no visible diseases or pests
          </Text>
        </View>
      )}

      {/* Recommendations */}
      {renderRecommendations()}

      {/* Analysis Details */}
      <TouchableOpacity 
        style={styles.detailsToggle}
        onPress={() => setShowDetails(!showDetails)}
      >
        <Text style={styles.detailsToggleText}>
          {showDetails ? 'Hide' : 'Show'} Analysis Details
        </Text>
        <MaterialIcons 
          name={showDetails ? 'expand-less' : 'expand-more'} 
          size={24} 
          color="#666" 
        />
      </TouchableOpacity>

      {showDetails && (
        <View style={styles.technicalDetails}>
          <Text style={styles.technicalTitle}>Technical Details</Text>
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Model Version:</Text>
            <Text style={styles.detailValue}>{analysis.modelVersion}</Text>
          </View>
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Analysis Time:</Text>
            <Text style={styles.detailValue}>
              {new Date(analysis.processedAt).toLocaleString()}
            </Text>
          </View>
          <View style={styles.detailItem}>
            <Text style={styles.detailLabel}>Overall Confidence:</Text>
            <Text style={styles.detailValue}>
              {Math.round((analysis.confidence || 0) * 100)}%
            </Text>
          </View>
        </View>
      )}

      {/* Action Buttons */}
      <View style={styles.actionButtons}>
        <TouchableOpacity 
          style={[styles.actionButton, { backgroundColor: '#3498db' }]}
          onPress={() => navigation.navigate('ExpertConsultation', { analysis })}
        >
          <MaterialIcons name="support-agent" size={20} color="white" />
          <Text style={styles.actionButtonText}>Consult Expert</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={[styles.actionButton, { backgroundColor: '#27ae60' }]}
          onPress={() => navigation.navigate('TreatmentPlan', { analysis })}
        >
          <MaterialIcons name="healing" size={20} color="white" />
          <Text style={styles.actionButtonText}>Treatment Plan</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.bottomSpacing} />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    paddingTop: 48,
  },
  backButton: {
    padding: 8,
    marginRight: 12,
  },
  headerTitle: {
    flex: 1,
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
  },
  shareButton: {
    padding: 8,
    marginLeft: 12,
  },
  scoreContainer: {
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 16,
    padding: 24,
    alignItems: 'center',
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  scoreTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
  },
  chartWrapper: {
    position: 'relative',
    alignItems: 'center',
    justifyContent: 'center',
  },
  progressChart: {
    borderRadius: 12,
  },
  scoreOverlay: {
    position: 'absolute',
    alignItems: 'center',
    justifyContent: 'center',
  },
  scoreValue: {
    fontSize: 32,
    fontWeight: 'bold',
  },
  scoreStatus: {
    fontSize: 16,
    fontWeight: '600',
    textTransform: 'capitalize',
    marginTop: 4,
  },
  statusIcon: {
    marginTop: 8,
  },
  confidenceBadge: {
    marginTop: 16,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  confidenceText: {
    fontSize: 14,
    fontWeight: '600',
  },
  infoCard: {
    backgroundColor: 'white',
    margin: 20,
    marginTop: 0,
    borderRadius: 16,
    padding: 20,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  growthStageContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginVertical: 12,
  },
  currentStage: {
    alignItems: 'center',
    flex: 1,
  },
  nextStage: {
    alignItems: 'center',
    flex: 1,
  },
  stageLabel: {
    fontSize: 12,
    color: '#666',
    textTransform: 'uppercase',
    fontWeight: '600',
    marginBottom: 4,
  },
  stageValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    textTransform: 'capitalize',
  },
  daysToNext: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginTop: 8,
  },
  nutrientsList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  nutrientBadge: {
    backgroundColor: '#e74c3c20',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  nutrientText: {
    color: '#e74c3c',
    fontSize: 12,
    fontWeight: '600',
    textTransform: 'capitalize',
  },
  issuesSection: {
    margin: 20,
    marginTop: 0,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  issueCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderLeftWidth: 4,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  issueHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  issueInfo: {
    flex: 1,
  },
  issueName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  issueMetrics: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  severityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  severityText: {
    fontSize: 12,
    fontWeight: '600',
    textTransform: 'capitalize',
  },
  confidenceMetric: {
    fontSize: 12,
    color: '#666',
  },
  affectedArea: {
    fontSize: 14,
    color: '#666',
    marginBottom: 12,
  },
  treatmentContainer: {
    backgroundColor: '#f8f9fa',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8,
  },
  treatmentTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginBottom: 6,
  },
  treatmentItem: {
    fontSize: 13,
    color: '#555',
    marginBottom: 2,
  },
  treatmentCost: {
    fontSize: 13,
    color: '#e74c3c',
    fontWeight: '600',
    marginTop: 4,
  },
  prognosis: {
    fontSize: 14,
    color: '#27ae60',
    fontWeight: '500',
    fontStyle: 'italic',
  },
  noIssuesCard: {
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 16,
    padding: 32,
    alignItems: 'center',
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  noIssuesTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2ecc71',
    marginTop: 16,
    marginBottom: 8,
  },
  noIssuesText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    lineHeight: 20,
  },
  recommendationsSection: {
    backgroundColor: 'white',
    margin: 20,
    marginTop: 0,
    borderRadius: 16,
    padding: 20,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
  },
  recommendationItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  recommendationText: {
    flex: 1,
    fontSize: 14,
    color: '#555',
    marginLeft: 12,
    lineHeight: 20,
  },
  detailsToggle: {
    backgroundColor: 'white',
    margin: 20,
    marginTop: 0,
    borderRadius: 12,
    padding: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  detailsToggleText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '500',
  },
  technicalDetails: {
    backgroundColor: 'white',
    margin: 20,
    marginTop: 0,
    borderRadius: 12,
    padding: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  technicalTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  detailItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  detailLabel: {
    fontSize: 14,
    color: '#666',
  },
  detailValue: {
    fontSize: 14,
    color: '#333',
    fontWeight: '500',
  },
  actionButtons: {
    flexDirection: 'row',
    margin: 20,
    gap: 12,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    borderRadius: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  actionButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },
  bottomSpacing: {
    height: 20,
  },
});

export default CropHealthResultsScreen;
